generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DB_URL")
}

model User {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    email     String   @unique
    passwordHash  String
    firstName String
    lastName  String
    papers    Paper[]  @relation()
    paperIds  String[]   @db.ObjectId
    libraries Library[] @relation()
    libraryIds String[]   @db.ObjectId
    groups    Group[]  @relation(fields: [groupIds], references: [id])
    groupIds  String[]   @db.ObjectId
    created   DateTime @default(now())
    updated   DateTime @updatedAt
}

model Group {
    id             String     @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    users          User[]     @relation(fields: [userIds], references: [id])
    userIds        String[]   @db.ObjectId
    papers    Paper[]  @relation()
    paperIds  String[]   @db.ObjectId
    libraries      Library[]  @relation()
    libraryIds     String[]   @db.ObjectId
    parentGroupId  String?    @db.ObjectId
    parentGroup    Group?     @relation("NestedGroups", fields: [parentGroupId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    nestedGroups   Group[]    @relation("NestedGroups")
    created        DateTime   @default(now())
    updated        DateTime   @updatedAt
}

model Paper {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    type        ReferenceType?
    title       String?
    abstract    String?
    authors     Author[]  @relation(fields: [authorIds], references: [id])
    authorIds   String[]   @db.ObjectId
    year        Int?
    month       Int?
    day         Int?
    publisher   String?
    publication String?
    volume      Int?
    issue       Int?
    pages       Int[]
    doi         String?
    libraries   Library[] @relation(fields: [libraryIds], references: [id])
    libraryIds  String[]   @db.ObjectId
    user        User?     @relation(fields: [userId], references: [id])
    userId      String?   @db.ObjectId
    group       Group?   @relation(fields: [groupId], references: [id])
    groupId     String?  @db.ObjectId
    created     DateTime @default(now())
    updated     DateTime @updatedAt
}

model Library {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    name    String
    papers  Paper[]  @relation(fields: [paperIds], references: [id])
    paperIds String[]   @db.ObjectId
    user    User?     @relation(fields: [userId], references: [id])
    userId  String?   @db.ObjectId
    group   Group?   @relation(fields: [groupId], references: [id])
    groupId String?  @db.ObjectId
    created DateTime @default(now())
    updated DateTime @updatedAt
}

model Author {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    fName   String
    lName   String
    papers  Paper[]  @relation(fields: [paperIds], references: [id])
    paperIds String[]   @db.ObjectId
    created DateTime @default(now())
    updated DateTime @updatedAt
}

enum ReferenceType {
    ARTICLE
    BOOK
}